---
title: Configuring Boomi Data Services for VMware Tanzu on TKGI
owner: Partners
---

This topic describes how to configure Boomi Data Services for VMware Tanzu 
Kubernetes Grid Integrated (TKGI).

## <a name="tasks"></a> Common Configuration Tasks

This section details common configuration tasks you may want or need to
undertake in your journey with Boomi Data Services.


### <a name="credentials"></a> Configuring Boomi AtomSphere Credentials

Your AtomSphere account, and a user for accessing the AtomSphere
Platform, are configured under the `boomi:` heading in
`values.yml`:

    boomi:
      username: you@you.ema.il
      password: "it's.a.secret.to.everybody!"
      account:  My-Boomi-ABCDEF
      subaccounts: My-Boomi-subaccount1-GHIJKL

Note that you may want to quote your password (as shown above) in
case it contains any special characters (like `#`) that may trip
up the YAML configuration format.

### <a name="deploy-alternate-namespace"></a> Deploying to an Alternate Namespace

If you want to deploy to an alternate Kubernetes namespace, make
sure you either set your `kubectl` context ahead of time, or run
`helm install` with the `--namespace` flag, like this:

    helm install --namespace alt-boomi ./dell-boomi -f values.yml

### <a name="registration-with-pcf"></a> Registering with VMware Tanzu

By default, the Helm chart will register your Boomi Data Services
Broker with your VMware Tanzu installation, set up some
routes for accessing the broker and deployed services, and
integrate Boomi Data Services into your services marketplace.

To do this, the following pieces of information are required:

  1. A VMware Tanzu API username / password, for broker registration
  2. A routing client ID and secret, for route registration
  3. A system domain
  4. The VMware Tanzu API endpoint

Item (1) is set via the `cf.username` and `cf.password`
configuration values:

    cf:
      username: admin
      password: "ij2ush7aeC3loophain2ieso7OfaV0oo"

Item (2) is set by the `cf.routingClient` and
`cf.routingClientSecret` (which you should get from your VMware Tanzu UAA
administrator).

    cf:
      routingClient:       boomi-route-registrar
      routingClientSecret: "noh0Ohcohruitai1Thees1ai"

Items (3) and (4) are set, respectively, by the `cf.domain`, and
`cf.api` configuration values:

    cf:
      api:    https://api.system.prod-cf.example.com
      domain: system.prod-cf.example.com

You may of course use a domain other than the VMware Tanzu system domain,
as long as your routing tier is properly configured and you are
aware of the security implications.

### <a name="skip-registration-with-pcf"></a> Skipping Registering with VMware Tanzu

If you are unable to register your Boomi Data Services Broker with
your VMware Tanzu installation, set the `cf.register`
chart value to `no`:

    cf:
      register: no

(by default, this is set to `yes`)

The deployment will still feature a broker pod, since the broker
is what performs the software installation for the clustered
nodes.

### <a name="proxies"></a> Running Boomi Data Services Behind HTTP(S) Proxies

If you need to operate behind an HTTP/HTTPS proxy, you can set the
following top-level properties in the `values.yml` file:

    proxy_host:  'proxy.example.com'
    proxy_port: '3128'
    proxy_username: 'fred'
    proxy_password: 'pickles'
    no_proxy:    .cf.local

Internally, these parts will be combined into a URL that is used to direct
traffic through a proxy.

    http_proxy='http://fred:pickles@proxy.example.com:8080

The use of special characters in passwords can be problematic in a URL. If these
cannot be avoided it is important to encode those characters as described by
RFC 3986 semantics (section 3.2.1.).  For example, assume that our proxy user is
`bob`, and the password is `go100%/of/theway` -- to handle the presence of
slashes and percent signs in the password, we have to encode the password
component thusly:

    proxy_password: 'go100%25%2fof%2ftheway'

Which results in a generated URL of:

    https_proxy='https://bob:go100%25%2fof%2ftheway@proxy.example.com:8080'

Note that `%` was expanded to `%25` (the hex ASCII value for the
percent sign), and both forward slashes were likewise converted to
their ASCII hex percent encoding, `%2f`.

The proxy environment variables will be set for all pod containers
that communicate with the outside world.

### <a name="image-registry"></a> Using an Image Registry

The Boomi Data Services for Tanzu Kubernetes Grid Integrated (TKGI)
distribution contains the actual image files that are needed to run
the system.  You will have to provide an OCI-compliant Image Registry
to host those images, so that your TKGI cluster can retrieve them.

The Helm chart needs to know where you are hosting these images to
properly configure TKGI to retrieve them.  This is done via the
`image.registry` configuration value:

    image:
      registry: harbor.pcf.prod1.example.com:8089/boomi

As shown above, you can specify the port that the registry
operates on, as well as an image directory (i.e. `boomi/`).
This is the same value you will pass to the `./loadup` script,
during installation:

    $ ./loadup harbor.pcf.prod1.example.com:8089/boomi

If you are using a molecule/atom install only, you can use the
`./loadup-molecule` script in place of `./loadup` to avoid loading
unneeded images to your registry.

### <a name="private-image-registry"></a> Using a Private Image Registry

For private Image Registries, that require authentication, you
will first have to create a Kubernetes secret and then reference
that in the `image.pullSecret` configuration value.

See [the Kubernetes documentation][k-priv-reg] for more details.

[k-priv-reg]: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/

## <a name="values-yml-reference"></a> `values.yml` Reference

This section provides a comprehensive reference to all settings that can be
tuned via the Helm `values.yml` file.  Settings are alphabetized for easy
reference.

- **boomi.account** (required)

  The name of your Boomi AtomSphere account.

  See also: `boomi.subaccounts`.

- **boomi.atomName** (required)

  A Boomi Atom Cloud Name for this deployment. This name should be unique to
  simplify identification in AtomSphere

- **boomi.cloudId** (required)

  A unique Boomi Molecule cloud id for this deployment.  This id
  must be unique and must be pre-configured in AtomSphere.

- **boomi.debug**

  A boolean flag that enables additional debugging output from the Boomi
  Cloud Molecule, the service broker, and other related pieces of the
  installation.

  Only the values `yes` and `no` (both quoted) will be honored:

      boomi:
        debug: "yes"

  Defaults to `no` (off).

  See also: `boomi.trace`.

- **boomi.environmentId**

  The ID of the environment that this cloud should be attached to in AtomSphere.
  If not specified, the Cloud will be in the Unattached Atoms list in Atom
  Management.

- **boomi.nodes** (required)

  The number of nodes to spin up inside of the Boomi Molecule.  Each node
  occupies exactly one Kubernetes Pod in your TKGI cluster.

- **boomi.username** (required)

  Your Boomi AtomSphere user account name, for accessing the API.  You are
  strongly encouraged to allocate a dedicated, standalone service user
  account, to avoid lockouts and other issues.

  See also: `boomi.password`.

- **boomi.password** (required)

  The password for the chosen Boomi AtomSphere user account.

  See also: `boomi.username`.

- **boomi.pollInterval** (optional)

  How often (in minutes) to poll the Boomi AtomSphere API looking for new
  integration packs to be made available, and subsequently refresh the
  catalog of available services.

  Defaults to `10` (minutes).

- **boomi.subaccounts** (required)

  A comma-separated list of Boomi Subaccounts that you wish to deploy
  integration packs on behalf of.

  See also: `boomi.account`.

- **boomi.containerProperties** (optional)

  If you need to add additional Boomi configuration options to the 
  container.properties file these can be added through this parameter. Any
  values entered here will be added to the existing container.properties.

  To use, add parameters as a pipe `|` delimieted variable with no extra
  whitespace. For example:

      boomi:
        containerProperties: com.boomi.container.purgeDays=45|com.boomi.container.multiTenant=true

- **boomi.atomVmoptions** (optional)

  If you need to add additional Boomi VM configuration options to the
  atom.vmoptions file these can be added through this parameter. Any values
  entered here will append to the existing container.properties.

  To use, add parameters as a pipe `|` delimieted variable with no extra
  whitespace. For example:

      boomi:
        atomVmoptions: -Xmx1024m|-Dsun.net.client.defaultReadTimeout=5000

- **boomi.trace**

  A boolean flag that enables trace-level debugging output from the Boomi
  Cloud Molecule, the service broker, and other related pieces of the
  installation.

  Only the values `yes` and `no` (both quoted) will be honored:

      boomi:
        trace: "yes"

  Defaults to `no` (off).

  See also: `boomi.debug`.

- **broker.password**

  The password to configure the Boomi Data Services Broker with, for
  protected communication with Tanzu Cloud Foundry.

  Defaults to `boomi`.

  See also: `broker.username`.

- **broker.username**

  The username to configure the Boomi Data Services Broker with, for
  protected communication with Tanzu Cloud Foundry.

  Defaults to `boomi`.

  See also: `broker.password`.

- **cf.api** (required)

  The full URI (including the `https://` bits) of your Tanzu Cloud Foundry
  API.  This will be used for registering the Boomi Data Services Broker
  into the services marketplace.

  This is required if `cf.register` is enabled.

- **cf.domain** (required)

  The System Domain of your Tanzu Cloud Foundry installation.  The routes
  for the Boomi Data Services Broker, and the proxied route for deployed
  services, will be registered under this domain.

  This is required if `cf.register` is enabled.

- **cf.password** (required)

  The password of an account in Tanzu Cloud Foundry that has sufficient
  access to register service brokers into the services marketplace.

  This is required if `cf.register` is enabled.

  See also: `cf.username`.

- **cf.register**

  A boolean flag that enables or disables registration of the Boomi Data
  Services Broker with the Tanzu Cloud Foundry routing tier, and the
  services marketplace.

  Defaults to `yes` (perform registration)

- **cf.routeClient** (required)

  The Tanzu Cloud Foundry UAA Client ID to use for registering routes with
  the Tanzu CF routing tier.

  This is required if `cf.register` is enabled.

  See also: `cf.routeClientSecret`.

- **cf.routeClientSecret** (required)

  The Tanzu Cloud Foundry UAA Client Secret to use for registering routes
  with the Tanzu CF routing tier.

  This is required if `cf.register` is enabled.

  See also: `cf.routeClient`.

- **cf.username**

  The username of an account in Tanzu Cloud Foundry that has sufficient
  access to register service brokers into the services marketplace.

  This is required if `cf.register` is enabled.

  See also: `cf.password`.

- **proxy_host**

  The hostname of your local networks' HTTP/HTTPS proxy for unencrypted traffic
  (if you have one). Provide host, port, user, and password information separately.

  See also `proxy_port`, `proxy_username`, and `proxy_password`

- **proxy_port**

  The port of your local networks' HTTP/HTTPS proxy for unencrypted traffic
  (if you have one). Provide host, port, user, and password information separately.
  If you specify a proxy port you must also provide a proxy host.

  See also `proxy_host`, `proxy_username`, and `proxy_password`

- **proxy_username**

  The username of your local networks' HTTP/HTTPS proxy for unencrypted traffic
  (if you have one). If you specify a proxy username, you must also provide a
  proxy password. Provide host, port, user, and password information separately.

  See also `proxy_host`, `proxy_port`, and `proxy_password`

- **proxy_password**

  The hostname of your local networks' HTTP/HTTPS proxy for unencrypted traffic
  (if you have one). If you specify a proxy password, you must also provide a
  proxy username. Provide host, port, user, and password information separately.

  See also `proxy_host`, `proxy_port`, and `proxy_username`

- **image.registry** (required)

  The hostname / IP (and optional repository path prefix) of the Docker
  Image Registry where you are installing the Boomi Data Services images.

- **image.prefix**

  A prefix for Boomi Data Servicees image names.  You will probably not need
  to change this from the default.  If you do, the value here must match the
  value of `PRE` given to the `loadup` script during <a
  href="installing.html#load-docker-images">installation</a>.

  Defaults to `dell-boomi-`.  Note the trailing `-`.

- **image.pullPolicy**

  What strategy should TKGI use when deciding on when to pull the contents of
  an image.  Valid values are `Always`, and `IfNotPresent`.

  Defaults to `Always`, which is usually the correct value, unless you
  have specific need to avoid excess load on your Docker Image Registry
  (at the expense of waiting for cache invalidation during upgrades).

- **image.pullSecret**

  If your Image Registry requires authentication, you can use the
  Kubernetes secrets engine to house those credentials.  This
  configuration value allows you to identify the name of the
  `Secret` that contains those credentials.

  If not specified, no authentication will be assumed (or applied)
  when pulling images.

- **image.tag**

  The tag to use when retrieving non-molecule images from the registry.  This
  is provided for debugging and advanced use cases; you generally will not
  need to change this.

  Defaults to the current release version.

- **image.moleculeName**

  The molecule/atom image name to be used for the Boomi Molecule. If not
  specified this will default to 'boomi/cloud'. Use of a different image may
  result in untested behavior and is not recommended.

  See also: `image.moleculeTag`.

- **image.moleculeTag**

  The molecule/atom image version to be used for the Boomi Molecule. If not set
  this will default to the version packaged and verified with this release. User
  of a different image version may result in untested behavior and is not
  recommended.

  See also: `image.moleculeName`.

- **ingress.certs.cert**

  Path to the certificate file to be used for TLS ingress.

  This is required if `ingress` is set.

  See also: `ingress.certs.key` and `ingress.hostname`

- **ingress.certs.key**

  Path to the key file that pairs with the certificate provided by
  `ingress.certs.cert`

  This is required if `ingress` is set.

  See also: `ingress.certs.cert` and `ingress.hostname`

- **ingress.hostname**

  The fully qualified hostname for the Ingress resource, this must match the
  CN in the certificate and key provided by `boomi.certs.*`.

  This is required if `ingress` is set.

  See also: `ingress.certs.cert` and `ingress.certs.key`

- **livenessProbes.enabled**

  Liveness probes are used to check the status of a container and if the
  molecule process is unavailable for an extended period of time allow
  TKGI to replace the pod. Initial liveness is checked at 5-minutes and
  then at 2-minute intervals thereafter. The check must fail three times
  consequtively before the container is replaced automatically.

  Liveness probes may cause containers under heavy load to be shut down
  in an undesireable fashion. If this occurs, turn off the livenessProbe.

  This defaults to 'yes'

- **no_proxy**

  A comma-separated list of IP addresses, full domains, and partial domain
  suffixes that are exempt from transiting the HTTP / HTTPS proxies, if they
  exist.

  See also `http_proxy` and `https_proxy`.

- **rbac.create**

  A boolean flag that controls whether or not the Helm chart for Boomi Data
  Services also deploys a service account to use for certain introspection
  tasks.  If you disable this (by setting it to `no`, for example), you will
  need to provide a value for `rbac.serviceAccountName`.

  Defaults to `yes` (RBAC machinery will be deployed alongside the rest of
  the Helm chart).

  See also `rbac.serviceAccountName` and `cf.register`.

- **rbac.serviceAccountName**

  The name of a TKGI Service Account that should be used for Kubernetes API
  access, when Boomi Data Services needs to introspect its own deployment.
  This happens primarily when registering routes with Tanzu Cloud Foundry,
  pursuant to the setting of `cf.register`.

  See also `rbac.create` and `cf.register`.

- **resources.\***

  Resources for CPU and Memory are configured per-container for `broker`, `dap`,
  and `molecule`. These are configured with the container name as a child to the
  `resources` attribute and as a parent to the `requests` and `limits attributes
  as shown in the following example:

    resources:
      molecule:
        requests:
          cpu: "259m"
          memory: "131Mi"
        limits:
          cpu: 2
          memory: 512Mi

- **service.type**

  The type of Kubernetes service to provision for handling traffic to the
  Boomi Data Services Broker, and the deployed services on the molecule
  component.

  Defaults to `LoadBalancer`.

- **storage.local.size**

  Configures the size of the local persistent volume created at `/app/data`.

  Defaults to 2Gi if not set.

  See also: `storage.local.storageClass`

- **storage.local.storageClass**

  Provides a local persistent volume based on `storageClass` mounted as
  `/app/data/` for more performant and consistent processing.

  This is required if `storage.local` is set.

  See also: `storage.local.size`

- **storage.mode**

  In _provisioned_ mode, the Kubernetes cluster handles the NFS configuration
  through a storageClass that is backed by an NFS storage provisioner and
  mounts shared volumes into all pods as necessary.  You may
  override the size of the provisioned volume via the `storage.size`
  configuration value. Set `storage.storageClass` to match the storageClass
  attached to your NFS provisioner.

  In _external_ mode, NFS volumes are provisioned and managed external to the
  Kubernetes cluster. External mode NFS supports an administrator provided PV
  via `storage.pvName`, or self-created PV mapped to an NFS host through
  `storage.server` and `storage.path`.

  See also: `storage.storageClass`

- **storage.server**

  The hostname (fully-qualified) or IP address of a remote NFS server.
  In _external_ mode (see `storage.mode`), this is the server that will host
  the Boomi Cloud Atom shared installation volume.

  This setting is mutually exclusive of `storage.pvName`. When `storage.pvName`
  is set, this option is ignored.

  See also `storage.mode` and `storage.path`.

- **storage.path**

  The remote path of the installation volume, for use in _external_ storage
  mode (see `storage.mode`).  This volume must be accessible, in read-write
  mode, to the TKGI pod network.

  This setting is mutually exclusive of `storage.pvName`. When `storage.pvName`
  is set, this option is ignored.

  See also `storage.mode` and `storage.server`.

- **storage.pvName**

  The PV name for an NFS volume that has been mapped to the TKGI cluster for
  use as the Boomi Cloud Atom shared installation volume. This setting is
  mutually exclusive of `storage.server` and `storage.path` and takes precedence
  when both options are specified. For an example PV definition see
  `extras/pv-definition.yml`.

  Known Issues:
  * When reusing a pre-defined PV it is necessary to release the claim of the
  original cluster by setting the UID on the claimRef to NULL using:
  `k patch pv deployment1-dell-boomi-nfs-pv -p '{"spec":{"claimRef":{"uid":null}}}'`
  where `deployment1-dell-boomi-nfs-pv` is the pvName in use.
  * When a deployment is removed and replaced with another of the same name, the
  example PV will "RETAIN" data. The the resulting AtomCloud will be a
  continuation of the original cluster. If this is not desired, connect to the
  NFS volume and clear its data manually.

  See also `storage.mode`

- **storage.storageClass**

  The storage class name (storageclass) to be used for the shared storage
  component. This storage class should be provided by an NFS provisioner
  such as [nfs-client-provisioner](https://github.com/helm/charts/tree/master/stable/nfs-client-provisioner)
  or [nfs-server-provisioner](https://hub.helm.sh/charts/stable/nfs-server-provisioner).

  Defaults to "nfs".

- **storage.size**

  For _provisioned_ storage mode (see `storage.mode`), this determines the
  size of the persistent volume that TKGI will provision for the Boomi Cloud
  Molecule installation disk.

  Defaults to `2Gi`.
